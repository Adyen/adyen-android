// Helper gradle file for creating release zip files. In order to use it, in the project gradle file; define
// RELEASE_ARTIFACT_NAME as follows.
//ext {
//    RELEASE_ARTIFACT_NAME = 'ui'
//}
//apply from: "$rootProject.rootDir/release.gradle"
// Then, at the root project, run the following command:
// ./gradlew clean build -PsdkRelease generateReleaseZips
apply plugin: 'maven'

def artifactId = project.RELEASE_ARTIFACT_NAME
def version = rootProject.versionName
def localReleaseDest = "${buildDir}/release/${version}"
def outputDirectory = "${project.rootProject.rootDir}/build/sdk-releases"
def outputZipName = "${project.name}-release-${version}.zip"

task androidJavadocs(type: Javadoc) {
    failOnError = false
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

uploadArchives {
    repositories.mavenDeployer {
        pom.groupId = "com.adyen.checkout"
        pom.artifactId = artifactId
        pom.version = version
        repository(url: "file://${localReleaseDest}")
    }
}

task generateReleaseZips(type: Zip) {
    from localReleaseDest
    destinationDir file("$outputDirectory")
    archiveName "$outputZipName"
    doLast {
        println "$outputDirectory/$outputZipName has been generated."
    }
}

generateReleaseZips.dependsOn(uploadArchives)

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}