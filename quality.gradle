apply plugin: "checkstyle"
task checkstyle(type: Checkstyle, dependsOn: "assembleDebug") {
    description = "Checkstyle"
    group = "verification"

    configFile = file("$rootDir/config/checkstyle/checkstyle-rules.xml")
    source = fileTree("src/main/java")
    include "**/*.java"
    exclude "**/gen/**"

    classpath = files()
    showViolations = true

    reports {
        xml.enabled true
        html.enabled true
        html.destination file("$project.buildDir/outputs/checkstyle/checkstyle.html")
    }
}

apply plugin: "findbugs"
task findbugs(type: FindBugs, dependsOn: "assembleDebug") {
    description = "Findbugs"
    group = "verification"

    effort = "max"
    reportLevel = "high"

    excludeFilter = file("$rootProject.rootDir/config/findbugs/findbugs-filter.xml")
    classes = files("$project.buildDir/intermediates/classes/debug")
    source = fileTree("$project.rootDir/src/")
    classpath = files()

    reports {
        xml.enabled false
        html.enabled true
        html.destination file("$project.buildDir/outputs/findbugs/findbugs.html")
    }
}

apply plugin: "pmd"
task pmd(type: Pmd, dependsOn: "assembleDebug") {
    description = "Pmd"
    group = "verification"

    ruleSetFiles = files("$rootProject.rootDir/config/pmd/pmd-rules.xml")
    source = fileTree("src/main/java")
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled false
        html.enabled true
        html.destination file("$project.buildDir/outputs/pmd/pmd.html")
    }
}

android {
    lintOptions {
        abortOnError = true

        xmlReport false
        htmlReport true
        htmlOutput file("$project.buildDir/outputs/lint/lint.html")
    }
}

// TODO: configure PMD to be less strict / valuable?
check.dependsOn "checkstyle", "findbugs", /*"pmd",*/ "lint"
